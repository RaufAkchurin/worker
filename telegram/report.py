from aiogram import Bot
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message

from API import post_shift_creation, get_worker_by_telegram
from report_kb import DateInlineKeyboard
from telegram import bot_kb


# TODO –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–µ–¥–∞—á—É –±–æ—Ç–∞ —á—Ç–æ–±—ã –Ω–µ –ø—É—Ç–∞–ª–∏—Å—å —Å–æ–æ–±—â–µ–Ω–∏—è –º–µ–∂–¥—É —Ä–∞–∑–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏


class ReportState(StatesGroup):
    value = State()
    adding_continue = State()
    confirmation = State()


async def message_to_confirmation(message: Message, state: FSMContext,
                                  bot: Bot):  # –≠–¢–û –ü–†–û–°–¢–û –°–û–û–ë–©–ï–ù–ò–ï –ë–ï–ó –í–°–Ø–ö–û–ô –õ–û–ì–ò–ö–ò
    data = await state.get_data()
    selected_date = data.get('selected_date')
    selected_object = data.get('selected_object_name')
    selected_category = data.get('selected_category_name')
    selected_type = data.get('selected_type_name')
    selected_measurement = data.get('selected_type_measurement')
    selected_value = data.get('report_value')

    message_text = (f'<u><b>–î–∞—Ç–∞:</b></u> {selected_date}   \n' \
                    f'<u><b>–û–±—ä–µ–∫—Ç:</b></u> {selected_object}   \n' \
                    f'<u><b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b></u> {selected_category} \n' \
                    f'<u><b>–¢–∏–ø —Ä–∞–±–æ—Ç:</b></u> {selected_type} \n' \
                    f'<u><b>—Ç–∏–ø –∏–∑–º.:</b></u> {selected_measurement} \n' \
                    f"<u><b>–û–±—ä—ë–º:</b></u> {selected_value}\n" \
                    "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ? (–¥–∞/–Ω–µ—Ç)"
                    )

    await bot.send_message(message.from_user.id, text=message_text,
                           parse_mode=ParseMode.HTML,
                           )


async def report_value_input(message: Message, state: FSMContext, bot: Bot):
    if message.text.isdigit():
        await state.update_data(report_value=message.text)
        await message_to_confirmation(message, state, bot)
        await state.set_state(ReportState.confirmation)
    else:
        await bot.send_message(message.from_user.id, text="‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —á–∏—Å–ª–æ‚ö†Ô∏è ")


async def shift_creation(message: Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    worker_id = get_worker_by_telegram(message.from_user.id)["worker"]["id"]
    date = data.get('selected_date')
    work_type_id = data.get('selected_type_id')
    value = data.get('report_value')
    response = await post_shift_creation(date=date, worker_id=worker_id, work_type_id=work_type_id, value=value,
                                         bot=bot)
    return response


async def report_confirmation(message: Message, state: FSMContext, bot: Bot):
    if message.text == "–¥–∞":
        result = await shift_creation(message=message, state=state, bot=bot)
        if result:
            await bot.send_message(message.from_user.id, text="üèÜ–û—Ç—á—ë—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–ΩüèÜ")

        else:
            await bot.send_message(message.from_user.id, text="üòï–û—Ç—á—ë—Ç –Ω–µ –ø—Ä–æ—à—ë–ª, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∑–∞–Ω–æ–≤–∞üòï",
                                   reply_markup=DateInlineKeyboard())

        await bot.send_message(message.from_user.id, text="–ñ–µ–ª–∞–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Ä–∞–±–æ—Ç—ã –ø–æ –¥–∞–Ω–Ω–æ–º—É –æ–±—ä–µ–∫—Ç—É?", reply_markup=bot_kb.yes_or_no_kb)
        if message.text == "–¥–∞":
            await state.set_state(ReportState.adding_continue)
        else:
            await state.clear()
            await bot.send_message(message.from_user.id, text="–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç—á—ë—Ç!")



    elif message.text == "–Ω–µ—Ç":
        await state.clear()
        await bot.send_message(message.from_user.id, text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –æ—Ç—á—ë—Ç–∞ –∑–∞–Ω–æ–≤–∞:",
                               reply_markup=DateInlineKeyboard())
    else:
        await bot.send_message(message.from_user.id, text="‚ö†Ô∏è –û—Ç–≤–µ—Ç–∏—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –¥–∞ –∏–ª–∏ –Ω–µ—Ç‚ö†Ô∏è")
