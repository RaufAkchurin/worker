from aiogram import Bot
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message

from telegram.API import get_worker_by_telegram, post_worker_registration


class RegisterState(StatesGroup):
    regName = State()
    regSurname = State()
    regPhone = State()
    confirmation = State()


async def answer_for_registered_user(message: Message, worker, bot: Bot):
    message_text = ('üë∑ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –ø–æ–¥ —Å–ª–µ–¥—É—é—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏: \n' \
                    f'–ò–º—è: <u><b>{worker["worker"]["name"]}</b></u> \n' \
                    f'–§–∞–º–∏–ª–∏—è: <u><b>{worker["worker"]["surname"]}</b></u> \n' \
                    f'–¢–µ–ª–µ—Ñ–æ–Ω: <u><b>{worker["worker"]["telephone"]}</b></u> \n' \
                    f'–¢–µ–ª–µ–≥—Ä–∞–º_–∞–π–¥–∏: <u><b>{message.from_user.id}</b></u> \n' \
                    )
    await bot.send_message(
        message.from_user.id,
        text=message_text,
        parse_mode=ParseMode.HTML,
    )


async def register_start(message: Message, state: FSMContext, bot: Bot):
    worker = get_worker_by_telegram(message.from_user.id)
    if worker:
        await answer_for_registered_user(message=message, worker=worker, bot=bot)
    else:
        await bot.send_message(message.from_user.id,
                               text=f'üìù –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω—ë–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é \n –î–ª—è –Ω–∞—á–∞–ª–∞ —Å–∫–∞–∂–∏—Ç–µ, –∫–∞–∫ –∫ –≤–∞—Å –∑–æ–≤—É—Ç? üìù')
        await state.set_state(RegisterState.regName)


async def register_name(message: Message, state: FSMContext, bot: Bot):
    if message.text.isalpha() and len(message.text) <= 12:
        await state.update_data(regname=message.text)
        await state.set_state(RegisterState.regSurname)
        await bot.send_message(message.from_user.id, text=f'ü§ù –ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è {message.text.capitalize()} ü§ù\n '
                                                          f"–í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é"
                               )
    else:
        await bot.send_message(message.from_user.id,
                               text="‚ö†Ô∏è–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –∏ –¥–ª–∏–Ω–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å 12 —Å–∏–º–≤–æ–ª–æ–≤‚ö†Ô∏è")


async def register_surname(message: Message, state: FSMContext, bot: Bot):
    if message.text.isalpha() and len(message.text) <= 12:
        await bot.send_message(message.from_user.id, text=f'‚≠ê –í–∞—à–∞ —Ñ–∞–º–∏–ª–∏—è {message.text.capitalize()}‚≠ê \n '
                                                          f'üì± –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –∫–æ—Ç–æ—Ä—ã–π –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Å–≤—è–∑–∏.\n'
                                                          f'                                                             \n'
                                                          f'‚ö†Ô∏è –§–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞: 89172839062\n'
                               )
        await state.update_data(regsurname=message.text)
        await state.set_state(RegisterState.regPhone)
    else:
        await bot.send_message(message.from_user.id,
                               text="‚ö†Ô∏è –§–∞–º–∏–ª–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –∏ –¥–ª–∏–Ω–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å 12 —Å–∏–º–≤–æ–ª–æ–≤‚ö†Ô∏è")


async def register_phone(message: Message, state: FSMContext, bot: Bot):
    # TODO –¥–æ–±–∞–≤–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é
    data_from_state = await state.get_data()
    regname = data_from_state.get('regname')
    regsurname = data_from_state.get('regsurname')

    if message.text.isdigit() and len(message.text) == 11:
        await bot.send_message(message.from_user.id, text=f'–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ: \n' \
                                                          f'–ò–º—è: {regname} \n' \
                                                          f'–§–∞–º–∏–ª–∏—è: {regsurname} \n' \
                                                          f'–¢–µ–ª–µ—Ñ–æ–Ω: {message.text} \n' \
                                                          "–í—Å—ë –≤–µ—Ä–Ω–æ?(–¥–∞/–Ω–µ—Ç)")
        await state.update_data(regtelephone=message.text)
        await state.set_state(RegisterState.confirmation)
    else:
        await bot.send_message(message.from_user.id, text="‚ö†Ô∏è–ù–æ–º–µ—Ä —É–∫–∞–∑–∞–Ω –≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ‚ö†Ô∏è")


async def register_confirmation(message: Message, state: FSMContext, bot: Bot):
    data_from_state = await state.get_data()
    name = data_from_state.get('regname')
    surname = data_from_state.get('regsurname')
    telephone = data_from_state.get('regtelephone')
    telegram_id = message.from_user.id

    if message.text == "–¥–∞":
        response = post_worker_registration(name=name, surname=surname, telephone=telephone, telegram_id=telegram_id)
        if response:
            await bot.send_message(message.from_user.id, text='–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ üÜó\n' \
                                                              '–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ—Ç—á—ë—Ç—ã –æ —Ä–∞–±–æ—Ç–µ —Å –¥–∞–Ω–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ —Ç–µ–ª–µ–≥—Ä–∞–º üë∑')
            await state.clear()  # –û—á–∏—â–∞–µ–º —Å—Ç–µ–π—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ –∏–Ω–∞—á–µ - —á—Ç–æ–±—ã –∑–∞–ø—É—Å–∫–∞–ª–æ—Å—å –∑–∞–Ω–æ–≤–∞
        else:
            await bot.send_message(message.from_user.id,
                                   text='‚ö†Ô∏è–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞, –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É‚ö†Ô∏è')

    elif message.text == "–Ω–µ—Ç":
        await state.clear()
        await state.set_state(RegisterState.regName)
        await bot.send_message(message.from_user.id, text="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∑–∞–Ω–æ–≤–∞")

    else:
        await bot.send_message(message.from_user.id, text="‚ö†Ô∏è –û—Ç–≤–µ—Ç–∏—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –¥–∞ –∏–ª–∏ –Ω–µ—Ç‚ö†Ô∏è")
