from aiogram import Router, Bot
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery
from aiogram.enums import ParseMode
from magic_filter import F

from telegram.API import get_worker_by_telegram, post_shift_creation
from telegram.cleaner.cleaner import Cleaner
from telegram.main_kb import main_kb
from telegram.report.report_kb import DateInlineKeyboard, DateCallbackFactory, ObjectInlineKeyboard, ObjectCallbackFactory, \
    CategoryInlineKeyboard, CategoryCallbackFactory, TypeInlineKeyboard, TypeCallbackFactory, PaginationCallbackFactory

router = Router()


class ReportState(StatesGroup):
    type_choice = State()
    value = State()
    confirmation = State()
    need_to_add_more = State()


@router.callback_query(DateCallbackFactory.filter())
async def process_data_press(callback: CallbackQuery,
                             callback_data: DateCallbackFactory,
                             state: FSMContext,
                             cleaner: Cleaner):
    await state.update_data(selected_date=callback_data.date)
    msg = await callback.bot.send_message(callback.message.chat.id,
                                          text=f'–î–∞—Ç–∞: {callback_data.date}\n' \
                                               f'–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç',
                                          reply_markup=ObjectInlineKeyboard()
                                          )
    await cleaner.add(msg.message_id)


@router.callback_query(ObjectCallbackFactory.filter())
async def process_object_press(callback: CallbackQuery,
                               callback_data: ObjectCallbackFactory,
                               state: FSMContext,
                               cleaner: Cleaner):
    await state.update_data(selected_object_id=callback_data.id)
    await state.update_data(selected_object_name=callback_data.name)
    msg = await callback.bot.send_message(callback.message.chat.id,
                                          text=f'–ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞: {callback_data.name}\n',
                                          reply_markup=CategoryInlineKeyboard(callback_data.id)
                                          )
    await cleaner.add(msg.message_id)


@router.callback_query(CategoryCallbackFactory.filter())
async def process_category_press(callback: CallbackQuery,
                                 callback_data: CategoryCallbackFactory,
                                 state: FSMContext):
    await state.update_data(selected_category_id=callback_data.id)
    await state.update_data(selected_category_name=callback_data.name)
    await callback.bot.send_message(callback.message.chat.id,
                                    text=f'–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {callback_data.name}\n',
                                    reply_markup=TypeInlineKeyboard(category_id=callback_data.id)
                                    )
    await state.set_state(ReportState.type_choice)


@router.callback_query(TypeCallbackFactory.filter())
async def process_type_press(callback: CallbackQuery,
                             callback_data: TypeCallbackFactory,
                             state: FSMContext,
                             cleaner: Cleaner
                             ):
    await state.update_data(selected_type_id=callback_data.id)  # –î–ª—è –ø–æ—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–º–µ–Ω—ã
    await state.update_data(selected_type_name=callback_data.name)
    await state.update_data(selected_type_measurement=callback_data.measurement)

    message_text = (f'–¢–∏–ø —Ä–∞–±–æ—Ç: {callback_data.name} \n' \
                    f"–í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ–±—ä—ë–º –≤—ã–ø–æ–ª–Ω–∏–Ω–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç –≤ <u><b>{callback_data.measurement}</b></u>\n"
                    )
    msg = await callback.bot.send_message(callback.message.chat.id,
                                          text=message_text,
                                          parse_mode=ParseMode.HTML,
                                          )
    await state.set_state(ReportState.value)
    await cleaner.add(msg.message_id)


async def info_about_choices(message: Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    selected_date = data.get('selected_date')
    selected_object = data.get('selected_object_name')
    selected_category = data.get('selected_category_name')
    selected_type = data.get('selected_type_name')
    selected_measurement = data.get('selected_type_measurement')
    selected_value = data.get('report_value')

    message_text = (f'<u><b>–î–∞—Ç–∞:</b></u> {selected_date}   \n' \
                    f'<u><b>–û–±—ä–µ–∫—Ç:</b></u> {selected_object}   \n' \
                    f'<u><b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b></u> {selected_category} \n' \
                    f'<u><b>–¢–∏–ø —Ä–∞–±–æ—Ç:</b></u> {selected_type} \n' \
                    f'<u><b>—Ç–∏–ø –∏–∑–º.:</b></u> {selected_measurement} \n' \
                    f"<u><b>–û–±—ä—ë–º:</b></u> {selected_value}\n" \
                    )

    msg = await bot.send_message(
        message.from_user.id, text=message_text,
        parse_mode=ParseMode.HTML,
    )
    return msg


async def info_about_added_report(message: Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    selected_date = data.get('selected_date')
    selected_object = data.get('selected_object_name')
    selected_category = data.get('selected_category_name')
    selected_type = data.get('selected_type_name')
    selected_measurement = data.get('selected_type_measurement')
    selected_value = data.get('report_value')

    message_text = (f'<u><b>–î–∞—Ç–∞:</b></u> {selected_date}   \n' \
                    f'<u><b>–û–±—ä–µ–∫—Ç:</b></u> {selected_object}   \n' \
                    f'<u><b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b></u> {selected_category} \n' \
                    f'<u><b>–¢–∏–ø —Ä–∞–±–æ—Ç:</b></u> {selected_type} \n' \
                    f'<u><b>—Ç–∏–ø –∏–∑–º.:</b></u> {selected_measurement} \n' \
                    f"<u><b>–û–±—ä—ë–º:</b></u> {selected_value}\n" \
                    )

    msg = await bot.send_message(
        message.from_user.id, text=message_text,
        parse_mode=ParseMode.HTML,
    )
    return msg


async def shift_creation(message: Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    worker_id = get_worker_by_telegram(message.from_user.id)["worker"]["id"]
    date = data.get('selected_date')
    work_type_id = data.get('selected_type_id')
    value = data.get('report_value')
    response = await post_shift_creation(date=date,
                                         worker_id=worker_id,
                                         worker_tg=message.from_user.id,
                                         work_type_id=work_type_id,
                                         value=value,
                                         bot=bot)
    return response


async def report_value_input(message: Message,
                             state: FSMContext,
                             bot: Bot,
                             cleaner: Cleaner):
    messages = []
    if message.text.isdigit():
        await state.update_data(report_value=message.text)
        messages.append(message)
        messages.append(await info_about_choices(message, state, bot))
        messages.append(await bot.send_message(message.from_user.id,
                                               text="–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ? (–¥–∞/–Ω–µ—Ç)",
                                               reply_markup=main_kb.yes_or_no_kb
                                               ))
        [await cleaner.add(message.message_id) for message in messages]
        await state.set_state(ReportState.confirmation)

    else:
        msg = await bot.send_message(message.from_user.id, text="‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —á–∏—Å–ª–æ‚ö†Ô∏è ")
        await cleaner.add(msg.message_id)


async def report_confirmation(message: Message, state: FSMContext, bot: Bot, cleaner: Cleaner):
    messages = [message, ]
    if message.text == "–¥–∞":
        result = await shift_creation(message=message, state=state, bot=bot)
        if result:
            await info_about_choices(message, state, bot)
            await bot.send_message(message.from_user.id,
                                   text="üèÜ–û—Ç—á—ë—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∏–º?üèÜ",
                                   reply_markup=main_kb.yes_or_no_kb)
            await state.set_state(ReportState.need_to_add_more)
        else:
            messages.append(await bot.send_message(message.from_user.id,
                                                   text="üòï–û—Ç—á—ë—Ç –Ω–µ –ø—Ä–æ—à—ë–ª, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∑–∞–Ω–æ–≤–∞üòï",
                                                   reply_markup=main_kb.main_kb
                                                   ))
            await state.clear()

    elif message.text == "–Ω–µ—Ç":
        await state.clear()
        messages.append(await bot.send_message(message.from_user.id,
                                               text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –æ—Ç—á—ë—Ç–∞ –∑–∞–Ω–æ–≤–∞:",
                                               reply_markup=DateInlineKeyboard()))
    else:
        messages.append(await bot.send_message(message.from_user.id,
                                               text="‚ö†Ô∏è –û—Ç–≤–µ—Ç–∏—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –¥–∞ –∏–ª–∏ –Ω–µ—Ç‚ö†Ô∏è"))

    [await cleaner.add(message.message_id) for message in messages]


async def add_more(message: Message, bot: Bot, state: FSMContext, cleaner: Cleaner) -> None:
    messages = [message, ]
    data = await state.get_data()
    selected_category_id = data.get("selected_category_id")
    if message.text == "–¥–∞":
        await state.set_state(ReportState.type_choice)
        await bot.send_message(message.from_user.id,
                               text=f'–í —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞–±–æ—Ç –∏–∑ —Å–ø–∏—Å–∫–∞',
                               reply_markup=TypeInlineKeyboard(category_id=selected_category_id))
        [await cleaner.add(message.message_id) for message in messages]

    else:
        await bot.send_message(message.from_user.id,
                               text=f'–°–ø–∞—Å–∏–±–æ –±–æ–ª—å—à–æ–µ, —Å–∫–æ—Ä–æ –≤–∞–º –ø—Ä–∏–¥—ë—Ç –µ–∫—Å–µ–ª—å —Ñ–∞–π–ª'
                                    f'\n–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –æ—Ç—á—ë—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ –≤ –º–µ–Ω—é –û–¢–ü–ê–†–í–ò–¢–¨ –û–¢–ß–Å–¢',
                               reply_markup=main_kb.main_kb)
        # TODO –¥–æ–±–∞–≤–∏—Ç—å –∑–¥–µ—Å—å –æ—Ç–ø—Ä–∞–≤–∫—É –µ–∫—Å–µ–ª—å —Ñ–∞–π–ª–∞ —é–∑–µ—Ä—É
        await state.clear()

    [await cleaner.add(m.message_id) for m in messages]
    await cleaner.purge()


@router.callback_query(PaginationCallbackFactory.filter(F.action.in_(["next", "previous"])))
async def paginator(query: CallbackQuery, callback_data: PaginationCallbackFactory):
    if "objects" in query.data:
        await query.message.edit_text(
            text="–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç",
            reply_markup=ObjectInlineKeyboard(url=callback_data.url)
        )
    elif "categories" in query.data:
        await query.message.edit_text(
            text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é",
            reply_markup=CategoryInlineKeyboard(url=callback_data.url, object_id=None)
        )

    elif "work_types" in query.data:
        await query.message.edit_text(
            text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞–±–æ—Ç",
            reply_markup=TypeInlineKeyboard(url=callback_data.url, category_id=None)
        )