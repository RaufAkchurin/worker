from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message


class RegisterState(StatesGroup):
    regName = State()
    regSurname = State()
    regPhone = State()
    confirmation = State()


async def register_start(message: Message, state: FSMContext):
    await message.answer(f'‚≠ê –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω—ë–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é \n –î–ª—è –Ω–∞—á–∞–ª–∞ —Å–∫–∞–∂–∏—Ç–µ, –∫–∞–∫ –∫ –≤–∞—Å –∑–æ–≤—É—Ç? ‚≠ê')
    await state.set_state(RegisterState.regName)


async def register_name(message: Message, state: FSMContext):
    #TODO –¥–æ–±–∞–≤–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é —á—Ç–æ–±—ã –±—ã–ª–∏ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –∏ —á—Ç–æ–±—ã –Ω–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ –±—ã–ª–æ
    await message.answer(f'–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è {message.text} \n'
                         f"–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é"
                         )
    await state.update_data(regname=message.text)
    await state.set_state(RegisterState.regSurname)


async def register_surname(message: Message, state: FSMContext):
    # TODO –¥–æ–±–∞–≤–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é —á—Ç–æ–±—ã –±—ã–ª–∏ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –∏ —á—Ç–æ–±—ã –Ω–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ –±—ã–ª–æ
    await message.answer(f'–í–∞—à–∞ —Ñ–∞–º–∏–ª–∏—è {message.text} \n'
                         f'–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, —á—Ç–æ–±—ã –±—ã—Ç—å –Ω–∞ —Å–≤—è–∑–∏ \n'
                         )
    await state.update_data(regsurname=message.text)
    await state.set_state(RegisterState.regPhone)


async def register_phone(message: Message, state: FSMContext):
    # TODO –¥–æ–±–∞–≤–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é
    data = await state.get_data()
    regname = data.get('regname')
    regsurname = data.get('regsurname')

    await message.answer(   f'–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ: \n' \
                            f'–ò–º—è: {regname} \n' \
                            f'–§–∞–º–∏–ª–∏—è: {regsurname} \n' \
                            f'–¢–µ–ª–µ—Ñ–æ–Ω: {message.text} \n' \
                            "–í—Å—ë –≤–µ—Ä–Ω–æ?(–¥–∞/–Ω–µ—Ç)")
    await state.update_data(regphone=message.text)
    await state.set_state(RegisterState.confirmation)


async def register_confirmation(message: Message, state: FSMContext):
    if message.text == "–¥–∞":
        await message.answer('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ üÜó\n' \
                            '–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ—Ç—á—ë—Ç—ã –æ —Ä–∞–±–æ—Ç–µ —Å –¥–∞–Ω–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ —Ç–µ–ª–µ–≥—Ä–∞–º üë∑')
        #TODO –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –µ–Ω–¥–ø–æ–∏–Ω—Ç –ø—Ä–∏ 200 —Å—Ç–∞—Ç—É—Å–µ
        #TODO –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –µ–Ω–¥–ø–æ–∏–Ω—Ç –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö

    elif message.text == "–Ω–µ—Ç":
        await state.set_state(RegisterState.regName)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∑–∞–Ω–æ–≤–∞")
