import logging
import sys
import asyncio

from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart
from aiogram.types import CallbackQuery
from registartion import RegisterState, register_start, register_name, register_phone, register_surname, \
    register_confirmation
from report_kb import ObjectInlineKeyboard, ObjectCallbackFactory, CategoryInlineKeyboard, TypeInlineKeyboard, \
    CategoryCallbackFactory, TypeCallbackFactory, DateCallbackFactory, DateInlineKeyboard, \
    PaginationCallbackFactory
import os
from dotenv import load_dotenv

from telegram.cleaner import Cleaner
from telegram.middleware.cleaner import CleanerMiddleware

from aiogram import Bot
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message

from API import post_shift_creation, get_worker_by_telegram
from report_kb import DateInlineKeyboard
import bot_kb


# TODO –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–µ–¥–∞—á—É –±–æ—Ç–∞ —á—Ç–æ–±—ã –Ω–µ –ø—É—Ç–∞–ª–∏—Å—å —Å–æ–æ–±—â–µ–Ω–∏—è –º–µ–∂–¥—É —Ä–∞–∑–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏


class ReportState(StatesGroup):
    type_choice = State()
    value = State()
    confirmation = State()


async def info_about_choices(message: Message, state: FSMContext,
                             bot: Bot):
    data = await state.get_data()
    selected_date = data.get('selected_date')
    selected_object = data.get('selected_object_name')
    selected_category = data.get('selected_category_name')
    selected_type = data.get('selected_type_name')
    selected_measurement = data.get('selected_type_measurement')
    selected_value = data.get('report_value')

    message_text = (f'<u><b>–î–∞—Ç–∞:</b></u> {selected_date}   \n' \
                    f'<u><b>–û–±—ä–µ–∫—Ç:</b></u> {selected_object}   \n' \
                    f'<u><b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b></u> {selected_category} \n' \
                    f'<u><b>–¢–∏–ø —Ä–∞–±–æ—Ç:</b></u> {selected_type} \n' \
                    f'<u><b>—Ç–∏–ø –∏–∑–º.:</b></u> {selected_measurement} \n' \
                    f"<u><b>–û–±—ä—ë–º:</b></u> {selected_value}\n" \
                    )

    msg = await bot.send_message(
        message.from_user.id, text=message_text,
        parse_mode=ParseMode.HTML,
    )
    return msg


async def info_about_added_report(message: Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    selected_date = data.get('selected_date')
    selected_object = data.get('selected_object_name')
    selected_category = data.get('selected_category_name')
    selected_type = data.get('selected_type_name')
    selected_measurement = data.get('selected_type_measurement')
    selected_value = data.get('report_value')

    message_text = (f'<u><b>–î–∞—Ç–∞:</b></u> {selected_date}   \n' \
                    f'<u><b>–û–±—ä–µ–∫—Ç:</b></u> {selected_object}   \n' \
                    f'<u><b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b></u> {selected_category} \n' \
                    f'<u><b>–¢–∏–ø —Ä–∞–±–æ—Ç:</b></u> {selected_type} \n' \
                    f'<u><b>—Ç–∏–ø –∏–∑–º.:</b></u> {selected_measurement} \n' \
                    f"<u><b>–û–±—ä—ë–º:</b></u> {selected_value}\n" \
                    )

    msg = await bot.send_message(
        message.from_user.id, text=message_text,
        parse_mode=ParseMode.HTML,
    )
    return msg


async def report_value_input(message: Message, state: FSMContext, bot: Bot):
    messages = []
    if message.text.isdigit():
        await state.update_data(report_value=message.text)
        messages.append(message)
        messages.append(await info_about_choices(message, state, bot))
        messages.append(await bot.send_message(message.from_user.id,
                                               text="–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ? (–¥–∞/–Ω–µ—Ç)",
                                               reply_markup=bot_kb.yes_or_no_kb
                                               ))
        [await cleaner.add(message.message_id) for message in messages]
        await state.set_state(ReportState.confirmation)

    else:
        msg = await bot.send_message(message.from_user.id, text="‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —á–∏—Å–ª–æ‚ö†Ô∏è ")
        await cleaner.add(msg.message_id)


async def shift_creation(message: Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    worker_id = get_worker_by_telegram(message.from_user.id)["worker"]["id"]
    date = data.get('selected_date')
    work_type_id = data.get('selected_type_id')
    value = data.get('report_value')
    response = await post_shift_creation(date=date,
                                         worker_id=worker_id,
                                         worker_tg=message.from_user.id,
                                         work_type_id=work_type_id,
                                         value=value,
                                         bot=bot)
    return response


load_dotenv()

HELP_COMMAND = """
/help - —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
"""

bot = Bot(os.getenv('TELEGRAM_BOT_TOKEN'))
dp = Dispatcher()

cleaner = Cleaner(limit=100)
dp.update.middleware(CleanerMiddleware(cleaner))


async def report_confirmation(message: Message, state: FSMContext, bot: Bot):
    messages = [message,]
    if message.text == "–¥–∞":
        result = await shift_creation(message=message, state=state, bot=bot)
        if result:
            await info_about_choices(message, state, bot)
            await bot.send_message(message.from_user.id,
                                   text="üèÜ–û—Ç—á—ë—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–ΩüèÜ",
                                   reply_markup=bot_kb.main_kb)
        else:
            messages.append(await bot.send_message(message.from_user.id,
                                                   text="üòï–û—Ç—á—ë—Ç –Ω–µ –ø—Ä–æ—à—ë–ª, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∑–∞–Ω–æ–≤–∞üòï",
                                                   reply_markup=bot_kb.main_kb
                                                   ))

        await state.set_state(ReportState.type_choice)

    elif message.text == "–Ω–µ—Ç":
        await state.clear()
        messages.append(await bot.send_message(message.from_user.id,
                                               text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –æ—Ç—á—ë—Ç–∞ –∑–∞–Ω–æ–≤–∞:",
                                               reply_markup=DateInlineKeyboard()))
    else:
        messages.append(await bot.send_message(message.from_user.id,
                                               text="‚ö†Ô∏è –û—Ç–≤–µ—Ç–∏—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –¥–∞ –∏–ª–∏ –Ω–µ—Ç‚ö†Ô∏è"))

    [await cleaner.add(message.message_id) for message in messages]
    await cleaner.purge()


async def report_continue(state: FSMContext, message: Message, bot: Bot):
    if message.text == "–¥–∞":
        data = await state.get_data()
        selected_object_id = data.get("selected_object_id")
        await bot.send_message(message.from_user.id,
                               text=f'–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è',
                               reply_markup=CategoryInlineKeyboard(selected_object_id))
    else:
        await bot.send_message(message.from_user.id, text="–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç—á—ë—Ç!")
        await state.clear()


# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
dp.message.register(register_start, F.text == '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è/–ü—Ä–æ—Ñ–∏–ª—å')
dp.message.register(register_name, RegisterState.regName)
dp.message.register(register_surname, RegisterState.regSurname)
dp.message.register(register_phone, RegisterState.regPhone)
dp.message.register(register_confirmation, RegisterState.confirmation)

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã –æ—Ç—á—ë—Ç–æ–≤
dp.message.register(report_value_input, ReportState.value)
dp.message.register(report_confirmation, ReportState.confirmation)


@dp.message(CommandStart())
async def start(message: Message):
    if get_worker_by_telegram(message.from_user.id):
        await bot.send_message(message.from_user.id, text=f"–ü—Ä–∏–≤–µ—Ç, –±–æ—Ç –∑–∞–ø—É—Å—Ç–∏–ª—Å—è \n" \
                                                          "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ - /start"
                               , reply_markup=bot_kb.main_kb)
    else:
        await bot.send_message(message.from_user.id, text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.",
                               reply_markup=bot_kb.main_kb)


@dp.message()
async def echo(message: Message):
    messages = []
    msg = message.text.lower()
    if msg == "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç":
        if get_worker_by_telegram(message.from_user.id):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            messages.append(await bot.send_message(message.from_user.id,
                                                   text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –æ—Ç—á—ë—Ç–∞:",
                                                   reply_markup=DateInlineKeyboard()))

        else:
            messages.append(await bot.send_message(message.from_user.id,
                                                   text="‚ö†Ô∏è –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ—Ç—á—ë—Ç—ã,"
                                                        " –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. ‚ö†Ô∏è"))

    elif msg == "–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –±–æ—Ç–∞":
        await bot.send_message(message.from_user.id, text="–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!",
                               reply_markup=bot_kb.main_kb)

    [await cleaner.add(message.message_id) for message in messages]


@dp.callback_query(PaginationCallbackFactory.filter(F.action.in_(["next", "previous"])))
async def paginator(query: CallbackQuery, callback_data: PaginationCallbackFactory):
    if "objects" in query.data:
        await query.message.edit_text(
            text="–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç",
            reply_markup=ObjectInlineKeyboard(url=callback_data.url)
        )
    elif "categories" in query.data:
        await query.message.edit_text(
            text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é",
            reply_markup=CategoryInlineKeyboard(url=callback_data.url, object_id=None)
        )

    elif "work_types" in query.data:
        await query.message.edit_text(
            text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞–±–æ—Ç",
            reply_markup=TypeInlineKeyboard(url=callback_data.url, category_id=None)
        )


@dp.callback_query(DateCallbackFactory.filter())
async def process_data_press(callback: CallbackQuery,
                             callback_data: DateCallbackFactory,
                             state: FSMContext):
    await state.update_data(selected_date=callback_data.date)
    msg = await callback.bot.send_message(callback.message.chat.id,
                                          text=f'–î–∞—Ç–∞: {callback_data.date}\n' \
                                               f'–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç',
                                          reply_markup=ObjectInlineKeyboard()
                                          )
    await cleaner.add(msg.message_id)


@dp.callback_query(ObjectCallbackFactory.filter())
async def process_object_press(callback: CallbackQuery,
                               callback_data: ObjectCallbackFactory,
                               state: FSMContext):
    await state.update_data(selected_object_id=callback_data.id)
    await state.update_data(selected_object_name=callback_data.name)
    msg = await callback.bot.send_message(callback.message.chat.id,
                                          text=f'–ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞: {callback_data.name}\n',
                                          reply_markup=CategoryInlineKeyboard(callback_data.id)
                                          )
    await cleaner.add(msg.message_id)


@dp.callback_query(CategoryCallbackFactory.filter())
async def process_category_press(callback: CallbackQuery,
                                 callback_data: CategoryCallbackFactory,
                                 state: FSMContext):
    await state.update_data(selected_category_id=callback_data.id)
    await state.update_data(selected_category_name=callback_data.name)
    msg = await callback.bot.send_message(callback.message.chat.id,
                                          text=f'–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {callback_data.name}\n',
                                          reply_markup=TypeInlineKeyboard(category_id=callback_data.id)
                                          )
    await state.set_state(ReportState.type_choice)


@dp.callback_query(TypeCallbackFactory.filter())
async def process_type_press(callback: CallbackQuery,
                             callback_data: TypeCallbackFactory,
                             state: FSMContext,
                             ):
    await state.update_data(selected_type_id=callback_data.id)  # –î–ª—è –ø–æ—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–º–µ–Ω—ã
    await state.update_data(selected_type_name=callback_data.name)
    await state.update_data(selected_type_measurement=callback_data.measurement)

    message_text = (f'–¢–∏–ø —Ä–∞–±–æ—Ç: {callback_data.name} \n' \
                    f"–í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ–±—ä—ë–º –≤—ã–ø–æ–ª–Ω–∏–Ω–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç –≤ <u><b>{callback_data.measurement}</b></u>\n"
                    )
    msg = await callback.bot.send_message(callback.message.chat.id,
                                          text=message_text,
                                          parse_mode=ParseMode.HTML,
                                          )
    await state.set_state(ReportState.value)
    await cleaner.add(msg.message_id)


async def main() -> None:
    await bot.delete_webhook(
        drop_pending_updates=True)  # –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–Ω–æ–º –±–æ—Ç–µ –ø–æ—Å–ª–µ –≤–∫–ª—é—á–µ–Ω–∏–∏ –µ–≥–æ –Ω–µ –±—É–¥—É—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è
    await dp.start_polling(bot)


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    asyncio.run(main())
