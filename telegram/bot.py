import logging
import sys
import asyncio

from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery

import bot_kb
from API import get_worker_by_telegram
from registartion import RegisterState, register_start, register_name, register_phone, register_surname, \
    register_confirmation
from report import ReportState, report_value_input, shift_creation
from report_kb import ObjectInlineKeyboard, ObjectCallbackFactory, CategoryInlineKeyboard, TypeInlineKeyboard, \
    CategoryCallbackFactory, TypeCallbackFactory, DateCallbackFactory, DateInlineKeyboard, \
    PaginationCallbackFactory
import os
from dotenv import load_dotenv

from telegram.cleaner import Cleaner
from telegram.middleware.cleaner import CleanerMiddleware

load_dotenv()

HELP_COMMAND = """
/help - —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
"""

bot = Bot(os.getenv('TELEGRAM_BOT_TOKEN'))
dp = Dispatcher()

cleaner = Cleaner(limit=100)
dp.update.middleware(CleanerMiddleware(cleaner))


async def report_confirmation(message: Message, state: FSMContext, bot: Bot):
    if message.text == "–¥–∞":
        result = await shift_creation(message=message, state=state, bot=bot)
        if result:
            await bot.send_message(message.from_user.id,
                                   text="üèÜ–û—Ç—á—ë—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–ΩüèÜ",
                                   reply_markup=bot_kb.main_kb
                                   )
            await cleaner.purge()
        else:
            await bot.send_message(message.from_user.id,
                                   text="üòï–û—Ç—á—ë—Ç –Ω–µ –ø—Ä–æ—à—ë–ª, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∑–∞–Ω–æ–≤–∞üòï",
                                   reply_markup=bot_kb.main_kb
                                   )
        await state.set_state(ReportState.type_choice)
        # await state.clear()

        # confirmation to continue adding report

        # await bot.send_message(message.from_user.id, text="–ñ–µ–ª–∞–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Ä–∞–±–æ—Ç—ã –ø–æ –¥–∞–Ω–Ω–æ–º—É –æ–±—ä–µ–∫—Ç—É?",
        #                        reply_markup=bot_kb.yes_or_no_kb)
        # if message.text == "–¥–∞":
        #     await state.set_state(ReportState.adding_continue)
        # else:
        #     await state.clear()
        #     await bot.send_message(message.from_user.id, text="–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç—á—ë—Ç!")



    elif message.text == "–Ω–µ—Ç":
        await state.clear()
        await bot.send_message(message.from_user.id, text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –æ—Ç—á—ë—Ç–∞ –∑–∞–Ω–æ–≤–∞:",
                               reply_markup=DateInlineKeyboard())
    else:
        await bot.send_message(message.from_user.id, text="‚ö†Ô∏è –û—Ç–≤–µ—Ç–∏—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –¥–∞ –∏–ª–∏ –Ω–µ—Ç‚ö†Ô∏è")


# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
dp.message.register(register_start, F.text == '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è/–ü—Ä–æ—Ñ–∏–ª—å')
dp.message.register(register_name, RegisterState.regName)
dp.message.register(register_surname, RegisterState.regSurname)
dp.message.register(register_phone, RegisterState.regPhone)
dp.message.register(register_confirmation, RegisterState.confirmation)

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã –æ—Ç—á—ë—Ç–æ–≤
dp.message.register(report_value_input, ReportState.value)
dp.message.register(report_confirmation, ReportState.confirmation)


@dp.message(CommandStart())
async def start(message: Message):
    if get_worker_by_telegram(message.from_user.id):
        await bot.send_message(message.from_user.id, text=f"–ü—Ä–∏–≤–µ—Ç, –±–æ—Ç –∑–∞–ø—É—Å—Ç–∏–ª—Å—è \n" \
                                                          "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ - /start"
                               , reply_markup=bot_kb.main_kb)
    else:
        await bot.send_message(message.from_user.id, text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.",
                               reply_markup=bot_kb.main_kb)


@dp.message()
async def echo(message: Message):
    msg = message.text.lower()
    if msg == "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç":
        if get_worker_by_telegram(message.from_user.id):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            msg = await bot.send_message(message.from_user.id, text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –æ—Ç—á—ë—Ç–∞:",
                                         reply_markup=DateInlineKeyboard())
        else:
            msg = await bot.send_message(message.from_user.id,
                                         text="‚ö†Ô∏è –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ—Ç—á—ë—Ç—ã, –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. ‚ö†Ô∏è")
    elif msg == "–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –±–æ—Ç–∞":
        msg = await bot.send_message(message.from_user.id, text="–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!",
                                     reply_markup=bot_kb.main_kb)
    await cleaner.add(msg.message_id)


@dp.callback_query(PaginationCallbackFactory.filter(F.action.in_(["next", "previous"])))
async def paginator(query: CallbackQuery, callback_data: PaginationCallbackFactory):
    if "objects" in query.data:
        await query.message.edit_text(
            text="–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç",
            reply_markup=ObjectInlineKeyboard(url=callback_data.url)
        )
    elif "categories" in query.data:
        await query.message.edit_text(
            text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é",
            reply_markup=CategoryInlineKeyboard(url=callback_data.url, object_id=None)
        )

    elif "work_types" in query.data:
        await query.message.edit_text(
            text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞–±–æ—Ç",
            reply_markup=TypeInlineKeyboard(url=callback_data.url, category_id=None)
        )


@dp.callback_query(DateCallbackFactory.filter())
async def process_data_press(callback: CallbackQuery,
                             callback_data: DateCallbackFactory,
                             state: FSMContext):
    await state.update_data(selected_date=callback_data.date)
    msg = await callback.bot.send_message(callback.message.chat.id,
                                          text=f'–î–∞—Ç–∞: {callback_data.date}\n' \
                                               f'–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç',
                                          reply_markup=ObjectInlineKeyboard()
                                          )
    await cleaner.add(msg.message_id)


@dp.callback_query(ObjectCallbackFactory.filter())
async def process_object_press(callback: CallbackQuery,
                               callback_data: ObjectCallbackFactory,
                               state: FSMContext):
    await state.update_data(selected_object_name=callback_data.name)
    msg = await callback.bot.send_message(callback.message.chat.id,
                                          text=f'–ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞: {callback_data.name}\n',
                                          reply_markup=CategoryInlineKeyboard(callback_data.id)
                                          )
    await cleaner.add(msg.message_id)


@dp.callback_query(CategoryCallbackFactory.filter())
async def process_category_press(callback: CallbackQuery,
                                 callback_data: CategoryCallbackFactory,
                                 state: FSMContext):
    await state.update_data(selected_category_id=callback_data.id)
    await state.update_data(selected_category_name=callback_data.name)
    msg = await callback.bot.send_message(callback.message.chat.id,
                                          text=f'–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {callback_data.name}\n',
                                          reply_markup=TypeInlineKeyboard(category_id=callback_data.id)
                                          )
    await state.set_state(ReportState.type_choice)


@dp.callback_query(TypeCallbackFactory.filter())
async def process_type_press(callback: CallbackQuery,
                             callback_data: TypeCallbackFactory,
                             state: FSMContext,
                             ):
    await state.update_data(selected_type_id=callback_data.id)  # –î–ª—è –ø–æ—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–º–µ–Ω—ã
    await state.update_data(selected_type_name=callback_data.name)
    await state.update_data(selected_type_measurement=callback_data.measurement)

    message_text = (f'–¢–∏–ø —Ä–∞–±–æ—Ç: {callback_data.name} \n' \
                    f'                                              \n' \
                    f"–í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ–±—ä—ë–º –≤—ã–ø–æ–ª–Ω–∏–Ω–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç –≤ <u><b>{callback_data.measurement}</b></u>\n"
                    )
    msg = await callback.bot.send_message(callback.message.chat.id,
                                          text=message_text,
                                          parse_mode=ParseMode.HTML,
                                          )
    await state.set_state(ReportState.value)
    await cleaner.add(msg.message_id)


async def main() -> None:
    await bot.delete_webhook(
        drop_pending_updates=True)  # –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–Ω–æ–º –±–æ—Ç–µ –ø–æ—Å–ª–µ –≤–∫–ª—é—á–µ–Ω–∏–∏ –µ–≥–æ –Ω–µ –±—É–¥—É—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è
    await dp.start_polling(bot)


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    asyncio.run(main())
