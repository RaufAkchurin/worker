import logging
import sys

from aiogram import types
from aiogram.enums import ParseMode
import aiogram.filters
import asyncio
from contextlib import suppress

from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart
from aiogram.filters.callback_data import CallbackData
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.exceptions import TelegramBadRequest

import keyboards

# TODO: –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –¢–ì-–∞–π–¥–∏ –≤ –ë–î
# TODO: –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –ø–∞—Ä–æ–ª—è

BOT_LINK = "t.me/stroyka_worker_bot"
TOKEN_API = "6769629902:AAGJf0olx2jc3hDADb-HFVYJzWgXFPLNGB8"
HELP_COMMAND = """
/help - —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
"""

bot = Bot(TOKEN_API)
dp = Dispatcher()
#############################################################################################
# smiles = [
#     ["ü•ë", "–Ø –ª—é–±–ª—é –∞–≤–æ–∫–∞–¥–æ!"],
#     ["üçì", "–ö–ª—É–±–Ω–∏–∫–∞ - —ç—Ç–æ –æ—Ä–µ—Ö"],
#     ["üí≠", "–û—Ö.. –∫–∞–∫ –º–Ω–æ–≥–æ –∏–¥–µ–π!"],
#     ["üôÉ", "–£ —Ç–µ–±—è –≤—Å—ë –ø–æ–ª—É—á–∏—Ç—Å—è!"]
# ]
#
#
# @dp.message(CommandStart())
# async def start(message: Message):
#     await message.answer("Hello, AIOgram 3.x", reply_markup=keyboards.main_kb)
#
#
# @dp.callback_query(keyboards.Pagination.filter(F.action.in_(["prev", "next"])))
# async def pagination_handler(call: CallbackQuery, callback_data: keyboards.Pagination):
#     page_num = int(callback_data.page)
#     page = page_num - 1 if page_num > 0 else 0
#
#     if callback_data.action == "next":
#         page = page_num + 1 if page_num < (len(smiles) - 1) else page_num
#
#     with suppress(TelegramBadRequest):
#         await call.message.edit_text(
#             f"{smiles[page][0]} <b>{smiles[page][1]}</b>",
#             reply_markup=keyboards.paginator(page)
#         )
#     await call.answer()
#
#
# @dp.message(F.text.lower().in_(["—Ö–∞–π", "—Ö–µ–ª–æ—É", "–ø—Ä–∏–≤–µ—Ç"]))
# async def greetings(message: Message):
#     await message.reply("–ü—Ä–∏–≤–µ–µ–µ–µ—Ç—å!")
#
#
# @dp.message()
# async def echo(message: Message):
#     msg = message.text.lower()
#
#     if msg == "—Å—Å—ã–ª–∫–∏":
#         await message.answer("–í–æ—Ç –≤–∞—à–∏ —Å—Å—ã–ª–∫–∏:", reply_markup=keyboards.links_kb)
#     elif msg == "—Å–ø–µ—Ü. –∫–Ω–æ–ø–∫–∏":
#         await message.answer("–°–ø–µ—Ü. –∫–Ω–æ–ø–∫–∏:", reply_markup=keyboards.spec_kb)
#     elif msg == "–æ—Ç–ø—Ä. –æ—Ç—á—ë—Ç":
#         await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ:", reply_markup=keyboards.objects_kb())
#     elif msg == "—Å–º–∞–π–ª–∏–∫–∏":
#         await message.answer(f"{smiles[0][0]} <b>{smiles[0][1]}</b>", reply_markup=keyboards.paginator())
#     elif msg == "–Ω–∞–∑–∞–¥":
#         await message.answer("–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!", reply_markup=keyboards.main_kb)

    #############################################################################################


async def on_startup():
    print("–Ø –±—ã–ª –∑–∞–ø—É—â–µ–Ω")


# @dp.message(aiogram.filters.CommandStart())
# async def help_command(message: types.Message):
#     await message.answer(text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º–º –ë–æ—Ç")
#     await message.delete()
#
#
# @dp.message(aiogram.filters.Command(commands=['help']))
# async def help_command(message: types.Message):
#     await message.reply(text=HELP_COMMAND)
#
#
# @dp.message(aiogram.filters.Command(commands=['description']))
# async def description_command(message: types.Message):
#     await message.reply(text="–î–∞–Ω–Ω—ã–π –±–æ—Ç —Å–æ–±–∏—Ä–∞–µ—Ç –æ—Ç—á—ë—Ç—ã –æ –≤–∞—à–µ–π —Ä–∞–±–æ—á–µ–π —Å–º–µ–Ω–µ")
#
#
# @dp.message()
# async def echo_capitalize(message: types.Message):
#     await message.answer(text=message.text.capitalize())

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
big_button_1 = InlineKeyboardButton(
    text='–ë–û–õ–¨–®–ê–Ø –ö–ù–û–ü–ö–ê 1',
    callback_data='big_button_1_pressed'
)

big_button_2 = InlineKeyboardButton(
    text='–ë–û–õ–¨–®–ê–Ø –ö–ù–û–ü–ö–ê 2',
    callback_data='big_button_2_pressed'
)


# –°–æ–∑–¥–∞–µ–º —Å–≤–æ–π –∫–ª–∞—Å—Å —Ñ–∞–±—Ä–∏–∫–∏ –∫–æ–ª–ª–±—ç–∫–æ–≤, —É–∫–∞–∑—ã–≤–∞—è –ø—Ä–µ—Ñ–∏–∫—Å
# –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É callback_data
class GoodsCallbackFactory(CallbackData, prefix="goods"):
    object_id: int
    category_id: int
    work_type_id: int


# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –∫–Ω–æ–ø–æ–∫, —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º —Ñ–∞–±—Ä–∏–∫–∏ –∫–æ–ª–ª–±—ç–∫–æ–≤
button_1 = InlineKeyboardButton(
    text='–ö–∞—Ç–µ–≥–æ—Ä–∏—è 1',   #name –æ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç—É—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å
    callback_data=GoodsCallbackFactory(
        object_id=1,    #id –æ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        category_id=0,
        work_type_id=0
    ).pack()
)

button_2 = InlineKeyboardButton(
    text='–ö–∞—Ç–µ–≥–æ—Ä–∏—è 2',
    callback_data=GoodsCallbackFactory(
        object_id=2,
        category_id=0,
        work_type_id=0
    ).pack()
)

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã, –¥–æ–±–∞–≤–ª—è—è –≤ —Å–ø–∏—Å–æ–∫ —Å–ø–∏—Å–∫–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏
markup = InlineKeyboardMarkup(
    inline_keyboard=[[button_1], [button_2]]
)


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
# –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
@dp.message(CommandStart())
async def process_start_command(message: Message):
    await message.answer(
        text='–í–æ—Ç —Ç–∞–∫–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞',
        reply_markup=markup
)


# # –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –ª—é–±–æ–π
# # –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ –∏ —Ä–∞—Å–ø–µ—á–∞—Ç—ã–≤–∞—Ç—å –∞–ø–¥–µ–π—Ç –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª
# @dp.callback_query()
# async def process_any_inline_button_press(callback: CallbackQuery):
#     print(callback.model_dump_json(indent=4, exclude_none=True))
#     await callback.answer()
#
# # –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –ª—é–±–æ–π
# # –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ –∏ —Ä–∞—Å–ø–µ—á–∞—Ç—ã–≤–∞—Ç—å –∞–ø–¥–µ–π—Ç –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª
# @dp.callback_query(GoodsCallbackFactory.filter(F.category_id==1))
# async def process_category_press(callback: CallbackQuery,
#                                  callback_data: GoodsCallbackFactory):
#     await callback.message.answer(text=callback_data.pack())
#     await callback.answer()

# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –ª—é–±–æ–π –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏
# –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤ —á–∞—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ callback_data
@dp.callback_query(GoodsCallbackFactory.filter())
async def process_category_press(callback: CallbackQuery,
                                 callback_data: GoodsCallbackFactory):
    await callback.message.answer(
        text=f'–û–±—ä–µ–∫—Ç: {callback_data.object_id}\n'\
             f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {callback_data.category_id}\n'\
             f'–¢–∏–ø —Ä–∞–±–æ—Ç: {callback_data.work_type_id}'
    )
    await callback.answer()

async def main() -> None:
    dp.startup.register(on_startup)
    # Initialize Bot instance with a default parse mode which will be passed to all API calls
    bot = Bot(TOKEN_API, parse_mode=ParseMode.HTML)
    # And the run events dispatching
    await dp.start_polling(bot)


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    asyncio.run(main())
    asyncio.get_event_loop().run_forever()

